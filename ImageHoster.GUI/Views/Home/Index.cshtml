@model IEnumerable<ImageHoster.CQRS.ReadModel.Dto.PhotoDto>

@{
    ViewBag.Title = "Index";
}

<h1>Welcome to Leeward Candy</h1>

@section Scripts
{
    <script src="~/Scripts/d3.min.js"></script>
    <script>
        var maxRadius = 128, // maximum radius of circle
    padding = 1, // padding between circles; also minimum radius
    margin = { top: -maxRadius, right: -maxRadius, bottom: -maxRadius, left: -maxRadius },
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

        var k = 1, // initial number of candidates to consider per circle
            m = 10, // initial number of circles to add per frame
            n = @(Model.Count()), // remaining number of circles to add
            newCircle = bestCircleGenerator(maxRadius, padding);

        var fullsvg = d3.select("#content").append("svg")
            .attr("width", width)
            .attr("height", height);

        var imageLinks = [];

        @foreach(var p in Model)
        {
            <text>
                imageLinks.push('@Url.Action("GetThumbnail", "Photo", new { filename = p.FileName })');
            </text>
        }

        fullsvg.append("defs");

        var svg = fullsvg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        d3.timer(function () {
            for (var i = 0; i < m && --n >= 0; ++i) {
                var circle = newCircle(k);
                var imagelink = imageLinks[i];

                fullsvg
                    .select("defs")
                    .append("pattern")
                    .attr('id', n)
                    .attr('width', 1)
                    .attr('height', 1)
                    .attr('patternUnits', 'objectBoundingBox')
                    .attr('patternContentUnits', 'userSpaceOnUse')
                    .attr("x", 0)
                    .attr("y", 0)
                    .append('image')
                        .attr("x", -100 * (circle[2] / maxRadius))
                        .attr("y", -100 * (circle[2] / maxRadius))
                        .attr('width', circle[2] * 4)
                        .attr('height', circle[2] * 4)
                        .attr("xlink:href", imagelink);

                var svgcircle = svg.append("circle")
                    .attr("cx", circle[0])
                    .attr("cy", circle[1])
                    .attr("r", 0)
                    .attr("fill", "url(#" + n + ")");

                svgcircle.transition()
                    .attr("r", circle[2]);

                // As we add more circles, generate more candidates per circle.
                // Since this takes more effort, gradually reduce circles per frame.
                if (k < 500) k *= 1.01, m *= .998;
            }
            return !n;
        });

        function bestCircleGenerator(maxRadius, padding) {
            var quadtree = d3.geom.quadtree().extent([[0, 0], [width, height]])([]),
                searchRadius = maxRadius * 2,
                maxRadius2 = maxRadius * maxRadius;

            return function (k) {
                var bestX, bestY, bestDistance = 0;

                for (var i = 0; i < k || bestDistance < padding; ++i) {
                    var x = Math.random() * width,
                        y = Math.random() * height,
                        rx1 = x - searchRadius,
                        rx2 = x + searchRadius,
                        ry1 = y - searchRadius,
                        ry2 = y + searchRadius,
                        minDistance = maxRadius; // minimum distance for this candidate

                    quadtree.visit(function (quad, x1, y1, x2, y2) {
                        if (p = quad.point) {
                            var p,
                                dx = x - p[0],
                                dy = y - p[1],
                                d2 = dx * dx + dy * dy,
                                r2 = p[2] * p[2];
                            if (d2 < r2) return minDistance = 0, true; // within a circle
                            var d = Math.sqrt(d2) - p[2];
                            if (d < minDistance) minDistance = d;
                        }
                        return !minDistance || x1 > rx2 || x2 < rx1 || y1 > ry2 || y2 < ry1; // or outside search radius
                    });

                    if (minDistance > bestDistance) bestX = x, bestY = y, bestDistance = minDistance;
                }

                var best = [bestX, bestY, bestDistance - padding];
                quadtree.add(best);
                return best;
            };
        }
    </script>

    @*<script>
        var container = $('.container')[1];
        var width = $('.container').width();
        var height = $(window).height();

        $(function () {
            var cellwidth = 30;
            var cellheight = 30;
            var gridwidth = Math.round(width / cellwidth);
            var gridheight = Math.round(height / cellheight);

            var pos = $(container).position();

            var grid = new Array(gridwidth);

            for (var i = 0; i < grid.length; i++)
                grid[i] = new Array(gridheight);

            for (y = 0; y < gridheight; y++) {
                for (x = 0; x < gridwidth; x++) {
                    if (grid[x][y] !== true) {
                        var xMax = 1;

                        while (x + xMax < gridwidth && grid[x + xMax][y] == null)
                            xMax++;

                        var xLengthOfElement = Math.ceil(Math.random() * xMax);
                        var yLengthOfElement = Math.ceil(Math.random() * (gridheight - y));

                        for (var elemX = x; elemX < x + xLengthOfElement; elemX++)
                            for (var elemY = y; elemY < y + yLengthOfElement; elemY++)
                                grid[elemX][elemY] = true;

                        var div = $('<div><img src="@Url.Action("GetThumbnail", "Photo", new { filename = Model.ElementAt(0).FileName })" class="" /></div>');
                        div.width(xLengthOfElement * cellwidth);
                        div.height(yLengthOfElement * cellheight);
                        div.css({ background: 'blue', left: pos.left + x * cellwidth, top: pos.top + y * cellheight, position: 'fixed' });
                        $(container).add(div);
                    }
                }
            }

            var i = 0;
        });
    </script>*@

}